import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import datetime
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk
from tkinter.font import Font

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP
try:
    nltk.data.find('vader_lexicon')
except:
    nltk.download('vader_lexicon')

class PsihozApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Psihoz - –î–Ω–µ–≤–Ω–∏–∫ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")
        self.root.geometry("1000x750")
        self.root.configure(bg="#FDDBB4")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∞ —Å–≤–æ–π)
        try:
            self.root.iconbitmap('psihoz_icon.ico')  # –î–ª—è Windows
        except:
            pass

        # –¶–≤–µ—Ç–∞ –∏–∑ –¢–ó
        self.bg_color = "#FDDBB4"
        self.button_color = "#96976B"
        self.text_color = "#FFFFFF"
        self.accent_color = "#80815A"
        self.text_dark = "#333333"

        # –®—Ä–∏—Ñ—Ç—ã
        self.title_font = Font(family="Arial", size=18, weight="bold")
        self.subtitle_font = Font(family="Arial", size=14, weight="bold")
        self.text_font = Font(family="Arial", size=12)
        self.small_font = Font(family="Arial", size=11)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.sia = SentimentIntensityAnalyzer()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.conn = sqlite3.connect('psihoz.db')
        self.create_tables()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.configure_styles()
        self.create_widgets()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.load_data()

    def configure_styles(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        
        # –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        style.configure('TFrame', background=self.bg_color)
        style.configure('TLabel', background=self.bg_color, foreground=self.text_dark, font=self.text_font)
        style.configure('TButton', font=self.text_font)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞)
        style.configure('Accent.TButton', 
                       background=self.button_color,
                       foreground=self.text_dark,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                       font=self.subtitle_font,
                       padding=10,
                       relief='flat',
                       borderwidth=0,
                       focuscolor=self.bg_color)
        
        style.map('Accent.TButton',
                 background=[('active', self.accent_color)],
                 foreground=[('active', self.text_dark)])  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        style.configure('TRadiobutton', 
                      background=self.bg_color,
                      foreground=self.text_dark,
                      font=self.text_font)
        
        # –°—Ç–∏–ª—å –¥–ª—è Treeview (—Ç–∞–±–ª–∏—Ü—ã)
        style.configure('Treeview', 
                      rowheight=30,
                      font=self.small_font,
                      background="#96976B",
                      fieldbackground="#FFFFFF")
        
        style.configure('Treeview.Heading', 
                      background=self.button_color,
                      foreground=self.text_color,  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                      font=self.text_font,
                      padding=5)
        
        style.map('Treeview', 
                 background=[('selected', self.accent_color)],
                 foreground=[('selected', self.text_color)])

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                mood TEXT NOT NULL,
                note TEXT,
                symptoms TEXT,
                sentiment_score REAL
            )
        ''')
        self.conn.commit()

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        header_frame = ttk.Frame(main_container)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_label = tk.Label(header_frame, 
                             text="PSIHOZ", 
                             font=("Arial", 24, "bold"), 
                             bg=self.bg_color,
                             fg=self.button_color)
        logo_label.pack(side=tk.LEFT)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = tk.Label(header_frame,
                                text="–î–Ω–µ–≤–Ω–∏–∫ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
                                font=self.subtitle_font,
                                bg=self.bg_color,
                                fg=self.text_dark)
        subtitle_label.pack(side=tk.LEFT, padx=10)

        # Notebook –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∞ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
        self.create_new_entry_tab()

        # –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è"
        self.create_history_tab()

        # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        self.create_analytics_tab()

        # –í–∫–ª–∞–¥–∫–∞ "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å" (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        self.create_emergency_tab()

    def create_new_entry_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="‚úèÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = ttk.Frame(tab)
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã
        form_card = ttk.Frame(container)
        form_card.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –î–∞—Ç–∞
        date_frame = ttk.Frame(form_card)
        date_frame.pack(fill=tk.X, pady=10)
        ttk.Label(date_frame, text="–î–∞—Ç–∞:").pack(side=tk.LEFT, padx=5)
        self.entry_date = ttk.Entry(date_frame, font=self.text_font)
        self.entry_date.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        self.entry_date.insert(0, datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))

        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        mood_frame = ttk.Frame(form_card)
        mood_frame.pack(fill=tk.X, pady=15)
        ttk.Label(mood_frame, text="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:").pack(side=tk.LEFT, padx=5)
        
        mood_container = ttk.Frame(mood_frame)
        mood_container.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.mood_var = tk.StringVar()
        moods = ["–û—Ç–ª–∏—á–Ω–æ üòä", "–•–æ—Ä–æ—à–æ üôÇ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòê", "–ü–ª–æ—Ö–æ üôÅ", "–£–∂–∞—Å–Ω–æ üòû"]
        for mood in moods:
            rb = ttk.Radiobutton(mood_container, 
                                text=mood, 
                                variable=self.mood_var, 
                                value=mood,
                                style='TRadiobutton')
            rb.pack(side=tk.LEFT, padx=10)

        # –°–∏–º–ø—Ç–æ–º—ã
        symptoms_frame = ttk.Frame(form_card)
        symptoms_frame.pack(fill=tk.X, pady=10)
        ttk.Label(symptoms_frame, text="–°–∏–º–ø—Ç–æ–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").pack(side=tk.LEFT, padx=5)
        self.entry_symptoms = ttk.Entry(symptoms_frame, font=self.text_font)
        self.entry_symptoms.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # –ó–∞–º–µ—Ç–∫–∞
        note_frame = ttk.Frame(form_card)
        note_frame.pack(fill=tk.BOTH, expand=True, pady=15)
        ttk.Label(note_frame, text="–ó–∞–º–µ—Ç–∫–∞:").pack(anchor='w', padx=5)
        
        note_container = ttk.Frame(note_frame)
        note_container.pack(fill=tk.BOTH, expand=True)
        
        self.text_note = tk.Text(note_container, 
                                font=self.text_font, 
                                wrap=tk.WORD,
                                padx=10,
                                pady=10,
                                height=8)  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞
        self.text_note.pack(fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
        scrollbar = ttk.Scrollbar(note_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_note.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.text_note.yview)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏–º–∞—è –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏)
        button_frame = ttk.Frame(form_card)
        button_frame.pack(fill=tk.X, pady=20)
        
        save_button = tk.Button(button_frame, 
                              text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                              command=self.save_entry,
                              bg=self.button_color,
                              fg=self.text_dark,  # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                              activebackground=self.accent_color,
                              activeforeground=self.text_dark,
                              font=self.text_font,
                              relief='flat',
                              padx=10,
                              pady=5)
        save_button.pack(fill=tk.X, ipady=5)

    def create_history_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìú –ò—Å—Ç–æ—Ä–∏—è")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = ttk.Frame(tab)
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
        columns = ("date", "mood", "symptoms", "note")
        self.history_tree = ttk.Treeview(container, 
                                       columns=columns, 
                                       show="headings", 
                                       height=15,
                                       selectmode='browse')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.history_tree.heading("date", text="–î–∞—Ç–∞")
        self.history_tree.heading("mood", text="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
        self.history_tree.heading("symptoms", text="–°–∏–º–ø—Ç–æ–º—ã")
        self.history_tree.heading("note", text="–ó–∞–º–µ—Ç–∫–∞")
        
        self.history_tree.column("date", width=150, anchor='center')
        self.history_tree.column("mood", width=120, anchor='center')
        self.history_tree.column("symptoms", width=180)
        self.history_tree.column("note", width=400)
        
        self.history_tree.pack(fill=tk.BOTH, expand=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.history_tree.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.history_tree.yview)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏)
        button_frame = ttk.Frame(container)
        button_frame.pack(fill=tk.X, pady=10)
        
        delete_button = tk.Button(button_frame, 
                                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", 
                                command=self.delete_entry,
                                bg=self.button_color,
                                fg=self.text_dark,
                                activebackground=self.accent_color,
                                activeforeground=self.text_dark,
                                font=self.text_font,
                                relief='flat',
                                padx=10,
                                pady=5)
        delete_button.pack(fill=tk.X, ipady=5)

    def create_analytics_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = ttk.Frame(tab)
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_frame = ttk.Frame(container)
        mood_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        ttk.Label(mood_frame, 
                 text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", 
                 font=self.subtitle_font).pack(anchor='w')
        
        self.figure_mood = plt.Figure(figsize=(6, 4), dpi=100)
        self.ax_mood = self.figure_mood.add_subplot(111)
        self.canvas_mood = FigureCanvasTkAgg(self.figure_mood, mood_frame)
        self.canvas_mood.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤
        symptoms_frame = ttk.Frame(container)
        symptoms_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        ttk.Label(symptoms_frame, 
                 text="–î–∏–Ω–∞–º–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 
                 font=self.subtitle_font).pack(anchor='w')
        
        self.figure_symptoms = plt.Figure(figsize=(6, 4), dpi=100)
        self.ax_symptoms = self.figure_symptoms.add_subplot(111)
        self.canvas_symptoms = FigureCanvasTkAgg(self.figure_symptoms, symptoms_frame)
        self.canvas_symptoms.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏)
        button_frame = ttk.Frame(container)
        button_frame.pack(fill=tk.X, pady=10)
        
        update_button = tk.Button(button_frame, 
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", 
                                command=self.update_analytics,
                                bg=self.button_color,
                                fg=self.text_dark,
                                activebackground=self.accent_color,
                                activeforeground=self.text_dark,
                                font=self.text_font,
                                relief='flat',
                                padx=10,
                                pady=5)
        update_button.pack(fill=tk.X, ipady=5)

    def create_emergency_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ttk.Frame(tab)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        canvas = tk.Canvas(main_frame, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set, bg=self.bg_color)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(scrollable_frame, 
                        text="–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", 
                        font=self.title_font,
                        bg=self.bg_color,
                        fg=self.button_color)
        header.pack(fill=tk.X, pady=10)

        # –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        breathing_frame = ttk.LabelFrame(scrollable_frame, 
                                       text="–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞",
                                       padding=20,
                                       style='TFrame')
        breathing_frame.pack(fill=tk.X, pady=15, padx=10)
        
        exercises = [
            "1. –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 6",
            "2. –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö 4, –∑–∞–¥–µ—Ä–∂–∫–∞ 4, –≤—ã–¥–æ—Ö 4, –ø–∞—É–∑–∞ 4",
            "3. –î–∏–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –≥–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏ –∂–∏–≤–æ—Ç–æ–º",
            "4. –î—ã—Ö–∞–Ω–∏–µ 4-7-8: –≤–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 7, –≤—ã–¥–æ—Ö —á–µ—Ä–µ–∑ —Ä–æ—Ç –Ω–∞ 8",
            "5. –ü–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –∑–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤—É—é –Ω–æ–∑–¥—Ä—é, –≤–¥–æ—Ö–Ω–∏—Ç–µ –ª–µ–≤–æ–π, –∑–∞–∂–º–∏—Ç–µ –ª–µ–≤—É—é, –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π"
        ]
        
        for ex in exercises:
            lbl = tk.Label(breathing_frame, 
                    text=ex, 
                    font=self.text_font,
                    bg=self.bg_color,
                    fg=self.text_dark,
                    anchor='w',
                    justify=tk.LEFT)
            lbl.pack(fill=tk.X, pady=5)

        # –¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è
        grounding_frame = ttk.LabelFrame(scrollable_frame, 
                                       text="–¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è",
                                       padding=20)
        grounding_frame.pack(fill=tk.X, pady=15, padx=10)
        
        techniques = [
            "1. –¢–µ—Ö–Ω–∏–∫–∞ 5-4-3-2-1: –Ω–∞–∑–æ–≤–∏—Ç–µ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç–µ, 4 –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å, "
            "3 –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—ã—à–∏—Ç–µ, 2 –∫–æ—Ç–æ—Ä—ã–µ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–∞ –∑–∞–ø–∞—Ö, 1 –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ –≤–∫—É—Å",
            
            "2. –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ: —Å–æ–∂–º–∏—Ç–µ –∫—É–ª–∞–∫–∏, –ø–æ—Ç–æ–ø–∞–π—Ç–µ –Ω–æ–≥–∞–º–∏, "
            "–ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–ª–∞ —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é",
            
            "3. –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ: –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–∫—Ä—É–∂–∞—é—â—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, "
            "–Ω–∞–∑–æ–≤–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–æ–∫—Ä—É–≥ –≤–∞—Å –ø–æ –ø–æ—Ä—è–¥–∫—É"
        ]
        
        for tech in techniques:
            lbl = tk.Label(grounding_frame, 
                    text=tech, 
                    font=self.text_font,
                    bg=self.bg_color,
                    fg=self.text_dark,
                    anchor='w',
                    justify=tk.LEFT,
                    wraplength=800)
            lbl.pack(fill=tk.X, pady=5)

        # –ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
        contacts_frame = ttk.LabelFrame(scrollable_frame, 
                                      text="–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                                      padding=20)
        contacts_frame.pack(fill=tk.X, pady=15, padx=10)
        
        contacts = [
            ("–û–±—â–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è", "8-800-333-44-34 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)"),
            ("–ï–¥–∏–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–º–æ—â–∏", "112 (—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ)"),
            ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–ª—É–∂–±–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏", "8-495-989-50-50"),
            ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä", "8-812-708-40-41"),
            ("–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤", "8-800-2000-122")
        ]
        
        for name, number in contacts:
            contact_frame = ttk.Frame(contacts_frame)
            contact_frame.pack(fill=tk.X, pady=8)
            
            name_label = tk.Label(contact_frame, 
                    text=f"{name}:", 
                    font=self.text_font,
                    bg=self.bg_color,
                    fg=self.text_dark,
                    anchor='w')
            name_label.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
            
            number_label = tk.Label(contact_frame, 
                    text=number, 
                    font=Font(family="Arial", size=12, weight="bold"),
                    bg=self.bg_color,
                    fg=self.button_color,
                    anchor='w')
            number_label.pack(side=tk.LEFT, padx=5)
            
            call_button = tk.Button(contact_frame, 
                                  text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", 
                                  command=lambda n=number: self.call_number(n),
                                  bg=self.button_color,
                                  fg=self.text_dark,
                                  activebackground=self.accent_color,
                                  activeforeground=self.text_dark,
                                  font=self.text_font,
                                  relief='flat',
                                  padx=10)
            call_button.pack(side=tk.RIGHT, padx=5)

        # –†–µ—Å—É—Ä—Å—ã
        resources_frame = ttk.LabelFrame(scrollable_frame, 
                                       text="–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
                                       padding=20)
        resources_frame.pack(fill=tk.X, pady=15, padx=10)
        
        resources = [
            ("PsyJournals", "https://psyjournals.ru/ - –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏"),
            ("–ü–æ–Ω–∏–º–∞—é—â–∞—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è", "https://psychotherapy.ru/ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–∞–ø–∏–∏"),
            ("B17.ru", "https://www.b17.ru/ - –°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤"),
            ("–Ø—Å–Ω–æ–µ —É—Ç—Ä–æ", "https://www.clear-morning.ru/ - –ü–æ–º–æ—â—å –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö")
        ]
        
        for name, url in resources:
            resource_frame = ttk.Frame(resources_frame)
            resource_frame.pack(fill=tk.X, pady=5)
            
            name_label = tk.Label(resource_frame, 
                    text=f"‚Ä¢ {name}:", 
                    font=self.text_font,
                    bg=self.bg_color,
                    fg=self.text_dark,
                    anchor='w')
            name_label.pack(side=tk.LEFT, padx=5)
            
            url_label = tk.Label(resource_frame, 
                    text=url, 
                    font=Font(family="Arial", size=11, underline=True),
                    bg=self.bg_color,
                    fg="#1a0dab",
                    anchor='w',
                    cursor="hand2")
            url_label.pack(side=tk.LEFT, padx=5)
            url_label.bind("<Button-1>", lambda e, u=url: self.open_url(u))

    def save_entry(self):
        date = self.entry_date.get()
        mood = self.mood_var.get()
        symptoms = self.entry_symptoms.get()
        note = self.text_note.get("1.0", tk.END).strip()
        
        if not mood:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        sentiment = self.sia.polarity_scores(note)
        sentiment_score = sentiment['compound']
        
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO entries (date, mood, note, symptoms, sentiment_score)
                VALUES (?, ?, ?, ?, ?)
            ''', (date, mood, note, symptoms, sentiment_score))
            self.conn.commit()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.clear_entry_fields()
            self.load_data()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")

    def clear_entry_fields(self):
        self.entry_date.delete(0, tk.END)
        self.entry_date.insert(0, datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))
        self.mood_var.set("")
        self.entry_symptoms.delete(0, tk.END)
        self.text_note.delete("1.0", tk.END)

    def load_data(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT date, mood, symptoms, note FROM entries ORDER BY date DESC")
        rows = cursor.fetchall()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.history_tree.get_children():
            self.history_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for row in rows:
            self.history_tree.insert("", tk.END, values=row)

    def delete_entry(self):
        selected_item = self.history_tree.selection()
        if not selected_item:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        date = self.history_tree.item(selected_item)['values'][0]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ—Ç {date}?"):
            try:
                cursor = self.conn.cursor()
                cursor.execute("DELETE FROM entries WHERE date = ?", (date,))
                self.conn.commit()
                self.load_data()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")

    def update_analytics(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT date, mood, sentiment_score, symptoms FROM entries ORDER BY date")
        data = cursor.fetchall()
        
        if not data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(data, columns=['date', 'mood', 'sentiment', 'symptoms'])
        df['date'] = pd.to_datetime(df['date'])
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.ax_mood.clear()
        mood_counts = df['mood'].value_counts()
        mood_counts.plot(kind='bar', ax=self.ax_mood, color=self.button_color, edgecolor='black')
        self.ax_mood.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', fontsize=14, fontweight='bold')
        self.ax_mood.set_xlabel('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', fontsize=12)
        self.ax_mood.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', fontsize=12)
        self.figure_mood.tight_layout()
        self.canvas_mood.draw()
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.ax_symptoms.clear()
        df['sentiment'].plot(ax=self.ax_symptoms, color=self.button_color, linewidth=2)
        self.ax_symptoms.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è', fontsize=14, fontweight='bold')
        self.ax_symptoms.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        self.ax_symptoms.set_ylabel('–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (-1 –¥–æ 1)', fontsize=12)
        self.figure_symptoms.tight_layout()
        self.canvas_symptoms.draw()

    def call_number(self, number):
        messagebox.showinfo("–ó–≤–æ–Ω–æ–∫", f"–ò–º–∏—Ç–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {number}")

    def open_url(self, url):
        import webbrowser
        webbrowser.open(url)

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = PsihozApp(root)
    app.run()